{
  "_args": [
    [
      {
        "raw": "superagent",
        "scope": null,
        "escapedName": "superagent",
        "name": "superagent",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/chencc/work/VSCodePro/express_Spider"
    ]
  ],
  "_from": "superagent",
  "_hasShrinkwrap": false,
  "_id": "superagent@4.0.0",
  "_location": "/superagent",
  "_nodeVersion": "11.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/superagent_4.0.0_1542467917770_0.37986514898351165"
  },
  "_npmUser": {
    "name": "kornel",
    "email": "npmspam@geekhood.net"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "inherits": "2.0.3",
    "string_decoder": "1.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "superagent",
    "scope": null,
    "escapedName": "superagent",
    "name": "superagent",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/superagent/-/superagent-4.0.0.tgz",
  "_shasum": "b9de499c0363acb53879cc42bd14ec26751050bb",
  "_shrinkwrap": null,
  "_spec": "superagent",
  "_where": "/Users/chencc/work/VSCodePro/express_Spider",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "browser": {
    "./lib/node/index.js": "./lib/client.js",
    "./test/support/server.js": "./test/support/blank.js"
  },
  "bugs": {
    "url": "https://github.com/visionmedia/superagent/issues"
  },
  "component": {
    "scripts": {
      "superagent": "lib/client.js"
    }
  },
  "contributors": [
    {
      "name": "Kornel Lesiński",
      "email": "kornel@geekhood.net"
    },
    {
      "name": "Peter Lyons",
      "email": "pete@peterlyons.com"
    },
    {
      "name": "Hunter Loftis",
      "email": "hunter@hunterloftis.com"
    }
  ],
  "dependencies": {
    "component-emitter": "^1.2.0",
    "cookiejar": "^2.1.2",
    "debug": "^4.0.0",
    "form-data": "^2.3.2",
    "formidable": "^1.2.0",
    "methods": "^1.1.1",
    "mime": "^2.0.3",
    "qs": "^6.5.1",
    "readable-stream": "^3.0.3"
  },
  "description": "elegant & feature rich browser / node HTTP with a fluent API",
  "devDependencies": {
    "Base64": "^1.0.1",
    "babel-core": "^6.26.3",
    "babel-preset-es2015": "^6.24.1",
    "babelify": "^8.0.0",
    "basic-auth-connect": "^1.0.0",
    "body-parser": "^1.18.2",
    "browserify": "^16.2.0",
    "cookie-parser": "^1.4.3",
    "express": "^4.16.3",
    "express-session": "^1.15.6",
    "marked": "^0.5.0",
    "mocha": "^3.5.3",
    "multer": "^1.3.0",
    "should": "^13.2.0",
    "should-http": "^0.1.1",
    "zuul": "^3.12.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-qaGDf+QUYxgMYdJBWCezHnc3UjrCUwxm5bCfxBhTXI5BbCluVzmVNYzxvCw1jP9PXmwUZeOW2yPpGm9fLbhtFg==",
    "shasum": "b9de499c0363acb53879cc42bd14ec26751050bb",
    "tarball": "https://registry.npmjs.org/superagent/-/superagent-4.0.0.tgz",
    "fileCount": 35,
    "unpackedSize": 433603,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb8DFOCRA9TVsSAnZWagAAZ4IP/irG4yDpIJaafxQxINWh\nLpyuyxIvWevbsZA06BC3VUG5DIXEFURzgPg1TJ8Bn7Y7D0DjXZerkAxD/BrZ\nE5eQ7bU6FYGNuusNAuDqyENDlTywzyjkuQKGw+WDYh8nhye737ezyD21j1IK\nj5AqlyDHHWQqU6jI3XW3qd9gsEdjWMwCQRG2eAFQS4e5BAFMz7TqtA8pKVUe\nEmenfX29YKTyyCr6jVjycklKngYyLDaLjGr9WM8SYQMYG/Ns5yDSYJxuobPw\n/Yz6FHAq5b9NcZN+z3S4F2MiK6TXhb5+GWksN5L0NLCj+KPNEfspRkB7G1+J\nMCDMFwmFAduFB5B3ngtIKIq/DZ2Km8ax6FNcQewdsPQBsnDfVwMcSEhP5aWj\nwQvqaMQodl6n/jbhfqDugLebb0lqEwWhYTSTa35XXcWszAk7a6r7IAtSntBx\n51UTdD+pPspTeXdQn4s+OFVzHZi4sXJH9gH3Z6D8HDGY5ZWt/nl4rCOweIiX\n9MnzuiJLt+/f4KHZHyTGuDTi1PCTuKQtSrA2rdPGO8q+2sApHfkBOKHBp9L7\nn8hMZYxFL4+EuH4qN+leizWUfqHe8pXFVN6bobJDm2P41mX6m+CKysTtWBg+\n0RGCfUlbNBvpvjLlMV0HRTMRYZn1zHY2N4/YMsPLUjdtBiD8po3ryy4yTedr\ntrJ8\r\n=y1fw\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.0"
  },
  "gitHead": "e94bb109ee5d574e62e49f45a1ff2a5c04fdfa72",
  "homepage": "https://github.com/visionmedia/superagent#readme",
  "keywords": [
    "http",
    "ajax",
    "request",
    "agent"
  ],
  "license": "MIT",
  "main": "./lib/node/index.js",
  "maintainers": [
    {
      "name": "defunctzombie",
      "email": "shtylman@gmail.com"
    },
    {
      "name": "kof",
      "email": "oleg008@gmail.com"
    },
    {
      "name": "kornel",
      "email": "pornel@pornel.net"
    },
    {
      "name": "naman34",
      "email": "naman34@gmail.com"
    },
    {
      "name": "nw",
      "email": "nw@nwhite.net"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "superjoe",
      "email": "superjoe30@gmail.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    },
    {
      "name": "travisjeffery",
      "email": "tj@travisjeffery.com"
    },
    {
      "name": "yields",
      "email": "yields@icloud.com"
    }
  ],
  "name": "superagent",
  "optionalDependencies": {},
  "readme": "# SuperAgent [![Build Status](https://travis-ci.org/visionmedia/superagent.svg?branch=master)](https://travis-ci.org/visionmedia/superagent)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/shtylman-superagent.svg)](https://saucelabs.com/u/shtylman-superagent)\n\nSuperAgent is a small progressive __client-side__ HTTP request library, and __Node.js__ module with the same API, sporting many high-level HTTP client features. View the [docs](https://visionmedia.github.io/superagent/).\n\n![super agent](http://f.cl.ly/items/3d282n3A0h0Z0K2w0q2a/Screenshot.png)\n\n## Installation\n\nnode:\n\n```\n$ npm install superagent\n```\n\nWorks with [browserify](https://github.com/substack/node-browserify) and [webpack](https://github.com/visionmedia/superagent/wiki/SuperAgent-for-Webpack).\n\n```js\nrequest\n  .post('/api/pet')\n  .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body\n  .set('X-API-Key', 'foobar')\n  .set('accept', 'json')\n  .end((err, res) => {\n    // Calling the end function will send the request\n  });\n```\n\n## Supported browsers and Node versions\n\nTested browsers:\n\n- Latest Firefox, Chrome, Safari\n- Latest Android, iPhone\n- IE10 through latest. IE9 with polyfills. Even though IE9 is supported, a polyfill for `window.FormData` is required for `.field()`.\n\nNode 6 or later is required.\n\n## Plugins\n\nSuperAgent is easily extended via plugins.\n\n```js\nconst nocache = require('superagent-no-cache');\nconst request = require('superagent');\nconst prefix = require('superagent-prefix')('/static');\n\nrequest\n  .get('/some-url')\n  .query({ action: 'edit', city: 'London' }) // query string\n  .use(prefix) // Prefixes *only* this request\n  .use(nocache) // Prevents caching of *only* this request\n  .end((err, res) => {\n    // Do something\n  });\n```\n\nExisting plugins:\n * [superagent-no-cache](https://github.com/johntron/superagent-no-cache) - prevents caching by including Cache-Control header\n * [superagent-prefix](https://github.com/johntron/superagent-prefix) - prefixes absolute URLs (useful in test environment)\n * [superagent-suffix](https://github.com/timneutkens1/superagent-suffix) - suffix URLs with a given path\n * [superagent-mock](https://github.com/M6Web/superagent-mock) - simulate HTTP calls by returning data fixtures based on the requested URL\n * [superagent-mocker](https://github.com/shuvalov-anton/superagent-mocker) — simulate REST API\n * [superagent-cache](https://github.com/jpodwys/superagent-cache) - A global SuperAgent patch with built-in, flexible caching\n * [superagent-cache-plugin](https://github.com/jpodwys/superagent-cache-plugin) - A SuperAgent plugin with built-in, flexible caching\n * [superagent-jsonapify](https://github.com/alex94puchades/superagent-jsonapify) - A lightweight [json-api](http://jsonapi.org/format/) client addon for superagent\n * [superagent-serializer](https://github.com/zzarcon/superagent-serializer) - Converts server payload into different cases\n * [superagent-httpbackend](https://www.npmjs.com/package/superagent-httpbackend) - stub out requests using AngularJS' $httpBackend syntax\n * [superagent-throttle](https://github.com/leviwheatcroft/superagent-throttle) - queues and intelligently throttles requests\n * [superagent-charset](https://github.com/magicdawn/superagent-charset) - add charset support for node's SuperAgent\n * [superagent-verbose-errors](https://github.com/jcoreio/superagent-verbose-errors) - include response body in error messages for failed requests\n\nPlease prefix your plugin with `superagent-*` so that it can easily be found by others.\n\nFor SuperAgent extensions such as couchdb and oauth visit the [wiki](https://github.com/visionmedia/superagent/wiki).\n\n## Upgrading from previous versions:\n\nOur breaking changes are mostly in rarely used functionality and from stricter error handling.\n\n* [3.x to 4.x](https://github.com/visionmedia/superagent/releases/tag/v4.0.0-alpha.1):\n  - Ensure you're running Node 6 or later. We've dropped support for Node 4.\n  - We've started using ES6 and for compatibility with Internet Explorer you may need to use Babel.\n  - We suggest migrating from `.end()` callbacks to `.then()` or `await`.\n* [2.x to 3.x](https://github.com/visionmedia/superagent/releases/tag/v3.0.0):\n  - Ensure you're running Node 4 or later. We've dropped support for Node 0.x.\n  - Test code that calls `.send()` multiple times. Invalid calls to `.send()` will now throw instead of sending garbage.\n* [1.x to 2.x](https://github.com/visionmedia/superagent/releases/tag/v2.0.0):\n  - If you use `.parse()` in the *browser* version, rename it to `.serialize()`.\n  - If you rely on `undefined` in query-string values being sent literally as the text \"undefined\", switch to checking for missing value instead. `?key=undefined` is now `?key` (without a value).\n  - If you use `.then()` in Internet Explorer, ensure that you have a polyfill that adds a global `Promise` object.\n* 0.x to 1.x:\n  - Instead of 1-argument callback `.end(function(res){})` use `.then(res => {})`.\n\n## Running node tests\n\nInstall dependencies:\n\n```shell\n$ npm install\n```\nRun em!\n\n```shell\n$ make test\n```\n\n## Running browser tests\n\nInstall dependencies:\n\n```shell\n$ npm install\n```\n\nStart the test runner:\n\n```shell\n$ make test-browser-local\n```\n\nVisit `http://localhost:4000/__zuul` in your browser.\n\nEdit tests and refresh your browser. You do not have to restart the test runner.\n\n\n## Packaging Notes for Developers\n\n**npm (for node)** is configured via the `package.json` file and the `.npmignore` file. Key metadata in the `package.json` file is the `version` field which should be changed according to semantic versioning and have a 1-1 correspondence with git tags. So for example, if you were to `git show v1.5.0:package.json | grep version`, you should see `\"version\": \"1.5.0\",` and this should hold true for every release. This can be handled via the `npm version` command. Be aware that when publishing, npm will presume the version being published should also be tagged in npm as `latest`, which is OK for normal incremental releases. For betas and minor/patch releases to older versions, be sure to include `--tag` appropriately to avoid an older release getting tagged as `latest`.\n\n**npm (for browser standalone)** When we publish versions to npm, we run `make superagent.js` which generates the standalone `superagent.js` file via `browserify`, and this file is included in the package published to npm (but this file is never checked into the git repository). If users want to install via npm but serve a single `.js` file directly to the browser, the `node_modules/superagent/superagent.js` is a standalone browserified file ready to go for that purpose. It is not minified.\n\n**npm (for browserify)** is handled via the `package.json` `browser` field which allows users to install SuperAgent via npm, reference it from their browser code with `require('superagent')`, and then build their own application bundle via `browserify`, which will use `lib/client.js` as the SuperAgent entrypoint.\n\n**bower** is configured via the `bower.json` file. Bower installs files directly from git/github without any transformation, so you *must* use Browserify or Webpack (or use npm).\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/visionmedia/superagent.git"
  },
  "scripts": {
    "prepare": "make all",
    "test": "make test",
    "test-http2": "make test-node-http2"
  },
  "version": "4.0.0"
}
